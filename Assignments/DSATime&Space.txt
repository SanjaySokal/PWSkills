Q1: Write a program to print the sum of all the elements present on even indices in the given array.
Input 1: arr[] = {3,20,4,6,9}
Output 1: 16

Solution:

    package DSA.Arrays;

    public class SumAtEven {
        public static void main(String[] args) {
            int arr[] = { 3, 20, 4, 6, 9 };

            int sum = 0;
            for (int i = 0; i < arr.length; i++) {
                if (i % 2 == 0) {
                    sum = sum + arr[i];
                }
            }

            System.out.println(sum);
        }
    }

=======================================================================

Q2: Write a program to traverse over the elements of the array using for each loop and print all even
elements.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 34 54
Input 1: arr[] = {4,3,6,7,1}
Output 1: 4 6


Solution:
    package DSA.Arrays;

    public class PrintEvenElements {
        public static void main(String[] args) {
            int arr[] = { 34, 21, 54, 65, 43 };

            for (int i : arr) {
                if (i % 2 == 0) {
                    System.out.print(i + " ");
                }
            }
        }
    }

===============================================================================


Q3: Write a program to calculate the maximum element in the array.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 65
Input 1: arr[] = {4,3,6,7,1}
Output 1: 7


Solution:
    package DSA.Arrays;

    public class MaxElement {
        public static void main(String[] args) {
            int max = 0;

            int[] arr = { 34, 21, 54, 65, 43 };

            for (int i = 0; i < arr.length; i++) {
                if (i == 0) {
                    max = arr[i];
                } else if (max <= arr[i]) {
                    max = arr[i];
                }
            }

            System.out.println(max);
        }
    }


=======================================================================


Q4: Write a program to find out the second largest element in a given array.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 54
Input 1: arr[] = {4,3,6,7,1}
Output 1: 6

Solution:

    package DSA.Arrays;

    public class SecondLargestNumber {
        public static void main(String[] args) {
            int arr[] = { 34, 21, 54, 65, 43 };

            int lastSecond = 0;
            int rem = 0;

            for (int i = 0; i < arr.length; i++) {
                if (i == 0) {
                    lastSecond = arr[i];
                    rem = arr[i];
                } else if (rem <= arr[i]) {
                    lastSecond = rem;
                    rem = arr[i];
                }
            }

            System.out.println(lastSecond);
        }
    }


========================================================================



Q5: Given an array. Find the first peak element in the array. A peak element is an element that is greater than
its just left and just right neighbor.
Input 1: arr[] = {1,3,2,6,5}
Output 1: 6
Input 2: arr[] = {1 4,7,3,2,6,5}
Output 1: 7

Solution:

    package DSA.Arrays;

    public class findPeakElement {
        public static void main(String[] args) {
            findPeakElement element = new findPeakElement();
            int[] arr = { 1, 4, 7, 3, 2, 6, 5 };

            System.out.println(element.findPeak(arr));
        }

        String findPeak(int[] arr) {
            int n = arr.length;
            for (int i = 1; i < n - 1; i++) {
                if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                    return "the element is " + arr[i];
                }
            }
            return "error";
        }
    }


===================================================================================




Q1: Take m and n input from the user and m * n integer inputs from user and print the following:
number of positive numbers
number of negative numbers
number of odd numbers
number of even numbers
number of 0.
Input 1:

Output :
number of positive numbers = 7
number of negative numbers = 6
number of odd numbers = 7
number of even numbers = 9
number of 0 = 3


Solution:

    package DSA.DArray;

    import java.util.Scanner;

    public class FindNumbersBy {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);

            int[][] arr = new int[4][4];

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }

            sc.close();

            int positiveNum = 0, negativeNum = 0, oddNum = 0, evenNum = 0, zero = 0;

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    if (arr[i][j] > 0) {
                        positiveNum++;
                    }

                    if (arr[i][j] < 0) {
                        negativeNum++;
                    }

                    if (arr[i][j] % 2 != 0) {
                        oddNum++;
                    }

                    if (arr[i][j] % 2 == 0) {
                        evenNum++;
                    }

                    if (arr[i][j] == 0) {
                        zero++;
                    }
                }
            }

            System.out.println("number of positive numbers " + positiveNum);
            System.out.println("number of negative numbers " + negativeNum);
            System.out.println("number of odd numbers " + oddNum);
            System.out.println("number of even numbers " + evenNum);
            System.out.println("number of zero numbers " + zero);
        }
    }



Q2: write a program to print the elements above the secondary diagonal in a user inputted
square matrix.
Input 1:

Output : 1 2 4

Solution:

    package DSA.DArray;

    import java.util.Scanner;

    public class DiagonalPrint {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);

            int[][] arr = new int[4][4];

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }

            sc.close();

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    System.out.print(arr[i][j] + " ");
                }
                System.out.println();
            }

            System.out.println("======================================");

            System.out.print("Primary Diagonal: ");

            for (int i = 0; i < arr.length; i++) {
                for (int j = i; j < arr.length; j++) {
                    System.out.print(arr[i][j] + " ");
                    break;
                }
            }
            System.out.println();

            System.out.println("======================================");

            System.out.print("Secondary Diagonal: ");

            for (int i = 0; i < arr.length; i++) {
                for (int j = i; j < arr.length; j++) {
                    System.out.print(arr[i][arr.length - j - 1] + " ");
                    break;
                }
            }
        }
    }


Q3: write a program to print the elements of both the diagonals in a user inputted square matrix
in any order.
Input 1:

Output 1: 1 3 5 7 9

Solution:

    package DSA.DArray;

    import java.util.Scanner;

    public class PrintDiagonalSqure {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);

            int[][] arr = new int[4][4];

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }

            sc.close();

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    System.out.print(arr[i][j] + " ");
                }
                System.out.println();
            }

            System.out.println("======================================");

            for (int i = 0; i < arr.length; i++) {
                for (int j = i; j < arr.length; j++) {
                    System.out.print(arr[i][j] + " ");
                    break;
                }

                for (int j = i; j < arr.length; j++) {
                    System.out.print(arr[i][arr.length - j - 1] + " ");
                    break;
                }
            }
        }
    }


Q4: Write a program to find the largest element of a given 2D array of integers.
Input 1:
Output : 9

Solution:

    package DSA.DArray;

    import java.util.Scanner;

    public class LargestElement {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);

            int[][] arr = new int[4][4];

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }

            sc.close();

            System.out.println("================");

            int largest = 0;

            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    if (i == 0) {
                        largest = arr[i][j];
                    } else if (arr[i][j] > largest) {
                        largest = arr[i][j];
                    }
                }
            }

            System.out.println("largest number is: " + largest);
        }
    }

Q5: Write a function which accepts a 2D array of integers and its size as arguments and
displays the elements of middle row and the elements of middle column. Printing can
be done in any order.
[Assuming the 2D Array to be a square matrix with odd dimensions i.e. 3x3, 5x5, 7x7 etc...]

Input 1:

Output : 3 5 5 6 37 7 6 4 3


