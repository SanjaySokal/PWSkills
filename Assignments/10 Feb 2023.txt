1. In Java, a constructor is a special method that is used to initialize the state of an object when it is created. It has the same name as the class and does not have a return type.

2. Constructor chaining in Java is the process of calling one constructor from another constructor within the same class or from a subclass. It allows the reuse of code and helps to avoid redundancy in the initialization of objects.

3. No, we cannot call a subclass constructor from a superclass constructor. The subclass constructor can only be called after the superclass constructor has completed its execution. 

4. If you keep a return type in a constructor in Java, it will no longer be considered a constructor and will instead be treated as a regular method. The code will not compile and you will get a compilation error.

5. The constructor which don't recieve any arguments or any parameter while creating object of that particular class and it is also called a default constructor.

6. In Java, a no-arguments constructor is a constructor that takes no parameters, whereas a default constructor is a no-arguments constructor that is provided by the compiler.

7. Constructor overloading is needed in Java when you want to create objects with different sets of initial values. By defining multiple constructors with different parameter lists, you can create objects with different initialization options.

8. Defult constructor is the constructor which will be created automatically by the compiler or we create it when we create the object of the class which don't recieve any arguments.

    public class Testing {
        Testing() {
            System.out.println("This is an default constructor");
        }

        public static void main(String[] args) {
            Testing testing = new Testing();
        }
    }